'use strict';
const fs = require('fs')
let taken = null
let port = 443
let host = 'api.hypixel.net'
let method = "GET"
const https = require('https')
class Client{
    /**
     * 
     * @param {object} options
     */
    constructor(options){
        if(!options.apiKey){
            throw new Error(`Please provide your api key!`)
        }
        this.key = options.apiKey
    }
    playerInfoName(name, callback){
        if(!name){
            throw new Error(`Please provide a name!`)
        }else if(!callback){
            throw new Error(`Please provide a callback!`)
        }else{
            let key = this.key
            let names = name
            let o = {
                host: host,
                port: port,
                path: `/player?name=${names}&key=${key}`,
                method: method
            }
            const req = https.request(o, (res) => {
                res.setEncoding('utf8')
                let raw = ''
                res.on('data', (d) => {
                    raw += d
                })
                res.on('end', () => {
                    let parsed = JSON.parse(raw)
                    callback(parsed)
                })
              })
              req.on('error', (e) => {
                console.error(e)
              })
              req.end()
        }
    }
    playerInfoUUID(UUID, callback){
        if(!UUID){
            throw new Error(`Please provide a UUID!`)
        }else if(!callback){
            throw new Error(`Please provide a callback!`)
        }else{
            let key = this.key
            let UUIDs = UUID
            let o = {
                host: host,
                port: port,
                path: `/player?uuid=${UUIDs}&key=${key}`,
                method: method
            }
            const req = https.request(o, (res) => {
                res.setEncoding('utf8')
                let raw = ''
                res.on('data', (d) => {
                    raw += d
                })
                res.on('end', () => {
                    let parsed = JSON.parse(raw)
                    callback(parsed)
                })
              })
              req.on('error', (e) => {
                console.error(e)
              })
              req.end()
        }
    }
    playerCount(callback){
        if(!callback){
            throw new Error(`Please provide a callback!`)
        }else{
            let key = this.key
            let o = {
                host: host,
                port: port,
                path: `/playerCount?&key=${key}`,
                method: method
            }
            const req = https.request(o, (res) => {
                res.setEncoding('utf8')
                let raw = ''
                res.on('data', (d) => {
                    raw += d
                })
                res.on('end', () => {
                    let parsed = JSON.parse(raw)
                    callback(parsed)
                })
              })
              req.on('error', (e) => {
                console.error(e)
              })
              req.end()
        }
    }
    watchDogStats(callback){
        if(!callback){
            throw new Error(`Please provide a callback!`)
        }else{
            let key = this.key
            let o = {
                host: host,
                port: port,
                path: `/watchdogstats?&key=${key}`,
                method: method
            }
            const req = https.request(o, (res) => {
                res.setEncoding('utf8')
                let raw = ''
                res.on('data', (d) => {
                    raw += d
                })
                res.on('end', () => {
                    let parsed = JSON.parse(raw)
                    callback(parsed)
                })
              })
              req.on('error', (e) => {
                console.error(e)
              })
              req.end()
        }
    }
    keyInfo(callback){
        if(!callback){
            throw new Error(`Please provide a callback!`)
        }else{
            let key = this.key
            let o = {
                host: host,
                port: port,
                path: `/key?&key=${key}`,
                method: method
            }
            const req = https.request(o, (res) => {
                res.setEncoding('utf8')
                let raw = ''
                res.on('data', (d) => {
                    raw += d
                })
                res.on('end', () => {
                    let parsed = JSON.parse(raw)
                    callback(parsed)
                })
              })
              req.on('error', (e) => {
                console.error(e)
              })
              req.end()
        }
    }
    boosters(callback){
        if(!callback){
            throw new Error(`Please provide a callback!`)
        }else{
            let key = this.key
            let o = {
                host: host,
                port: port,
                path: `/boosters?&key=${key}`,
                method: method
            }
            const req = https.request(o, (res) => {
                res.setEncoding('utf8')
                let raw = ''
                res.on('data', (d) => {
                    raw += d
                })
                res.on('end', () => {
                    let parsed = JSON.parse(raw)
                    callback(parsed)
                })
              })
              req.on('error', (e) => {
                console.error(e)
              })
              req.end()
        }
    }
    findGuildUUID(UUID, callback){
        if(!UUID){
            throw new Error(`Please provide a UUID!`)
        }else if(!callback){
            throw new Error(`Please provide a callback!`)
        }else{
            let key = this.key
            let UUIDs = UUID
            let o = {
                host: host,
                port: port,
                path: `/findGuild?byUuid=${UUIDs}&key=${key}`,
                method: method
            }
            const req = https.request(o, (res) => {
                res.setEncoding('utf8')
                let raw = ''
                res.on('data', (d) => {
                    raw += d
                })
                res.on('end', () => {
                    let parsed = JSON.parse(raw)
                    callback(parsed)
                })
              })
              req.on('error', (e) => {
                console.error(e)
              })
              req.end()
        }
    }
    findGuildName(name, callback){
        if(!name){
            throw new Error(`Please provide a name (case sensetive)!`)
        }else if(!callback){
            throw new Error(`Please provide a callback!`)
        }else{
            let key = this.key
            let names = name
            let o = {
                host: host,
                port: port,
                path: `/findGuild?byName=${names}&key=${key}`,
                method: method
            }
            const req = https.request(o, (res) => {
                res.setEncoding('utf8')
                let raw = ''
                res.on('data', (d) => {
                    raw += d
                })
                res.on('end', () => {
                    let parsed = JSON.parse(raw)
                    callback(parsed)
                })
              })
              req.on('error', (e) => {
                console.error(e)
              })
              req.end()
        }
    }
    friends(UUID, callback){
        if(!UUID){
            throw new Error(`Please provide a UUID!`)
        }else if(!callback){
            throw new Error(`Please provide a callback!`)
        }else{
            let key = this.key
            let UUIDs = UUID
            let o = {
                host: host,
                port: port,
                path: `/friends?uuid=${UUIDs}&key=${key}`,
                method: method
            }
            const req = https.request(o, (res) => {
                res.setEncoding('utf8')
                let raw = ''
                res.on('data', (d) => {
                    raw += d
                })
                res.on('end', () => {
                    let parsed = JSON.parse(raw)
                    callback(parsed)
                })
              })
              req.on('error', (e) => {
                console.error(e)
              })
              req.end()
        }
    }
    guildInfoID(ID, callback){
        if(!ID){
            throw new Error(`Please provide a guildID! You can get this by using the "findGuildUUID" or "findGuildName" option!`)
        }else if(!callback){
            throw new Error(`Please provide a callback!`)
        }else{
            let key = this.key
            let IDs = ID
            let o = {
                host: host,
                port: port,
                path: `/guild?id=${IDs}&key=${key}`,
                method: method
            }
            const req = https.request(o, (res) => {
                res.setEncoding('utf8')
                let raw = ''
                res.on('data', (d) => {
                    raw += d
                })
                res.on('end', () => {
                    let parsed = JSON.parse(raw)
                    callback(parsed)
                })
              })
              req.on('error', (e) => {
                console.error(e)
              })
              req.end()
        }
    }
    leaderBoards(callback){
        if(!callback){
            throw new Error(`Please provide a callback!`)
        }
        let key = this.key
        let o = {
            host: host,
            port: port,
            path: `/leaderboards?&key=${key}`,
            method: method
        }
        const req = https.request(o, (res) => {
            res.setEncoding('utf8')
            let raw = ''
            res.on('data', (d) => {
                raw += d
            })
            res.on('end', () => {
                let parsed = JSON.parse(raw)
                callback(parsed)
            })
          })
          req.on('error', (e) => {
            console.error(e)
          })
          req.end()
    }
    session(UUID, callback){
        if(!UUID){
            throw new Error(`Please provide a UUID!`)
        }else if(!callback){
            throw new Error(`Please provide a callback!`)
        }else{
            let key = this.key
            let UUIDs = UUID
            let o = {
                host: host,
                port: port,
                path: `/session?uuid=${UUIDs}&key=${key}`,
                method: method
            }
            const req = https.request(o, (res) => {
                res.setEncoding('utf8')
                let raw = ''
                res.on('data', (d) => {
                    raw += d
                })
                res.on('end', () => {
                    let parsed = JSON.parse(raw)
                    callback(parsed)
                })
              })
              req.on('error', (e) => {
                console.error(e)
              })
              req.end()
        }
    }
    achievements(callback){
        if(!callback) throw new Error(`Please provide a callback!`)
        callback(fs.readFileSync('./misc/ach.json', `utf8`))
    }
    gameTypes(callback){
        if(!callback) throw new Error(`Please provide a callback!`)
        callback(fs.readFileSync(`./misc/gts.txt`, `utf8`))
    }
    challenges(callback){
        if(!callback) throw new Error(`Please provide a callback!`)
        callback(fs.readFileSync(`./misc/chall.json`, `utf8`))
    }
    guildAchievements(callback){
        if(!callback) throw new Error(`Please provide a callback!`)
        callback(fs.readFileSync(`./misc/gach.json`, `utf8`))
    }
    guildPermissions(callback){
        if(!callback) throw new Error(`Please provide a callback!`)
        callback(fs.readFileSync(`./misc/gperms.json`, `utf8`))
    }
    quests(callback){
        if(!callback) throw new Error(`Please provide a callback!`)
        callback(fs.readFileSync(`./misc/quest.json`, `utf8`))
    }
    getUUID(IGN, callback){
        if(!IGN) throw new Error(`Please provide a IGN!`)
        if(!callback) throw new Error(`Please provide a callback!`)
        let o = {
            host: host,
            port: port,
            path: `/users/profiles/minecraft/${IGN}`,
            method: method
        }
        const req = https.request(o, (res) => {
            res.setEncoding('utf8')
            let raw = ''
            res.on('data', (d) => {
                raw += d
            })
            res.on('end', () => {
                let parsed = JSON.parse(raw)
                callback(parsed)
            })
          })
          req.on('error', (e) => {
            console.error(e)
          })
          req.end()
    }
    pastNamesIGN(IGN, callback){
        if(!IGN) throw new Error(`Please provide a IGN!`)
        if(!callback) throw new Error(`Please provide a callback!`)
        let o = {
            host: 'api.mojang.com',
            port: port,
            path: `/users/profiles/minecraft/${IGN}`,
            method: method
        }
        const req = https.request(o, (res) => {
            res.setEncoding('utf8')
            let raw = ''
            res.on('data', (d) => {
                raw += d
            })
            res.on('end', () => {
                let parsed = JSON.parse(raw)
                let oo = {
                    host: 'api.mojang.com',
                    port: port,
                    path: `/user/profiles/${parsed.id}/names`,
                    method: method
                }
                const reqq = https.request(oo, (res) => {
                    res.setEncoding('utf8')
                    let raww = ''
                    res.on('data', (d) => {
                        raww += d
                    })
                    res.on('end', () => {
                        let parsedd = JSON.parse(raww)
                        callback(parsedd)
                    })
                  })
                  reqq.on('error', (e) => {
                    console.error(e)
                  })
                  reqq.end()
            })
          })
          req.on('error', (e) => {
            console.error(e)
          })
          req.end()
    }
    pastNamesUUID(UUID, callback){
        if(!UUID) throw new Error(`Please provide a IGN!`)
        if(!callback) throw new Error(`Please provide a callback!`)
        let o = {
            host: 'api.mojang.com',
            port: port,
            path: `/user/profiles/${UUID}/names`,
            method: method
        }
        const req = https.request(o, (res) => {
            res.setEncoding('utf8')
            let raw = ''
            res.on('data', (d) => {
                raw += d
            })
            res.on('end', () => {
                let parsed = JSON.parse(raw)
                callback(parsed)
            })
          })
          req.on('error', (e) => {
            console.error(e)
          })
          req.end()
    }
    checkName(username, callback){
        if(!username) throw new Error(`Please provide a username!`)
        if(!callback) throw new Error(`Please provide a callback!`)
        let o = {
            host: 'api.mojang.com',
            port: port,
            path: `/users/profiles/minecraft/${username}`,
            method: method
        }
        const req = https.request(o, (res) => {
            res.setEncoding('utf8')
            if(res.statusCode === 204) return taken = false, callback(JSON.parse("{\"taken\": " + taken + "}"))
            taken = true
            let raw = ''
            res.on('data', (d) => {
                raw += d
            })
            res.on('end',async () => {
                let t = {
                    taken: taken,
                    by: JSON.parse(raw)
                }
                callback(t)
            })
          })
          req.on('error', (e) => {
            console.error(e)
          })
          req.end()
    }
    skyblockNews(callback){
        if(!callback) throw new Error(`Please provide a callback!`)
        let key = this.key
            let o = {
                host: host,
                port: port,
                path: `/skyblock/news?key=${key}`,
                method: method
            }
            const req = https.request(o, (res) => {
                res.setEncoding('utf8')
                let raw = ''
                res.on('data', (d) => {
                    raw += d
                })
                res.on('end', () => {
                    let parsed = JSON.parse(raw)
                    callback(parsed)
                })
              })
              req.on('error', (e) => {
                console.error(e)
              })
              req.end()
    }
    skyblockAuctions(page, callback){
            if(!callback) throw new Error(`Please provide a callback!`)
            if(!page || !parseInt(page)) throw new Error(`Please provide a page as an interger [number]!`)
            let key = this.key
                let o = {
                    host: host,
                    port: port,
                    path: `/skyblock/auctions?page=${page}&key=${key}`,
                    method: method
                }
                const req = https.request(o, (res) => {
                    res.setEncoding('utf8')
                    let raw = ''
                    res.on('data', (d) => {
                        raw += d
                    })
                    res.on('end', () => {
                        let parsed = JSON.parse(raw)
                        callback(parsed)
                    })
                  })
                  req.on('error', (e) => {
                    console.error(e)
                  })
                  req.end()
        }
        skyblockPlayerAuctions(UUID, callback){
            if(!callback) throw new Error(`Please provide a callback!`)
            if(!UUID) throw new Error(`Please provide a player UUID!`)
            let key = this.key
                let o = {
                    host: host,
                    port: port,
                    path: `/skyblock/auction?player=${UUID}&key=${key}`,
                    method: method
                }
                const req = https.request(o, (res) => {
                    res.setEncoding('utf8')
                    let raw = ''
                    res.on('data', (d) => {
                        raw += d
                    })
                    res.on('end', () => {
                        let parsed = JSON.parse(raw)
                        callback(parsed)
                    })
                  })
                  req.on('error', (e) => {
                    console.error(e)
                  })
                  req.end()
        }
    skyblockPlayerProfile(UUID, callback){
        if(!callback) throw new Error(`Please provide a callback!`)
            if(!UUID) throw new Error(`Please provide a player UUID!`)
            let key = this.key
                let o = {
                    host: host,
                    port: port,
                    path: `/skyblock/profile?profile=${UUID}&key=${key}`,
                    method: method
                }
                const req = https.request(o, (res) => {
                    res.setEncoding('utf8')
                    let raw = ''
                    res.on('data', (d) => {
                        raw += d
                    })
                    res.on('end', () => {
                        let parsed = JSON.parse(raw)
                        callback(parsed)
                    })
                  })
                  req.on('error', (e) => {
                    console.error(e)
                  })
                  req.end()
    }
    //TEMP COMMANDS
    //TEMP COMMANDS
    //TEMP COMMANDS
    //TEMP COMMANDS
    //WILL MAKE BETTER SOONTM
    serverPing(serverIp, callback){
        if(!serverIp) throw new Error(`Please provide a server ip!`)
        if(!callback) throw new Error(`Please provide a callback!`)
        let o = {
            host: 'eu.mc-api.net',
            port: port,
            path: `/v3/server/ping/${serverIp}`,
            method: method
        }
        const req = https.request(o, (res) => {
            res.setEncoding('utf8')
            let raw = ''
            res.on('data', (d) => {
                raw += d
            })
            res.on('end', () => {
                let parsed = JSON.parse(raw)
                callback(parsed)
            })
          })
          req.on('error', (e) => {
            console.error(e)
          })
          req.end()
    }
}
module.exports = Client